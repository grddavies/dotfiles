#!/usr/bin/env bash
#
# Git tag a motilent report plugin
#
# This script:
# - Validates the git repository state
# - Creates the QA suffix if --QA flag passed
# - Creates a new annotated tag with a JIRA ticket reference to
#   a) the user-inputted release JIRA ticket number if it is a release tag
#   b) the JIRA ticket number from the last commit if it is a QA tag
#
# Requirements:
# - git
# - git-common.sh in the same directory
# - tr
# - sort
set -euo pipefail

readonly JIRA_URL="https://jira.motilent.io/browse"
source "$(dirname "$0")/git-common.sh"

# Convert kebab-case to SCREAMING_SNAKE_CASE
convert_to_screaming_snake() {
  echo "$1" | tr '-' '_' | tr '[:lower:]' '[:upper:]'
}

# Validates that a version is in x.y.z format (semver, no pre-release tags)
validate_version() {
  local version=$1
  if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echoerr "Invalid version format '$version'. Expected x.y.z" >&2
    exit 1
  fi
}

# Get the next pre-release suffix for a report version
# Args:
# tag_prefix: X.Y.X-QA_REPORT_NAME.
get_next_index() {
  local tag_prefix="$1"
  local max_index=0

  while read -r tag; do
    if [[ $tag =~ ([0-9]{3})$ ]]; then
      index=$((10#${BASH_REMATCH[1]}))
      ((index > max_index)) && max_index=$index
    fi
  done < <(git tag --list "$tag_prefix*" | sort --version-sort)

  printf "%03d" $((max_index + 1))
}

usage() {
  echo "Usage: $0 <x.y.z> [--qa]"
  echo "  version        Version number (x.y.z format)"
  echo "  --qa           Make a QA-prerelease tag"
  exit 1
}

# Parse arguments
# Show usage if no args passed
[ $# -eq 0 ] && usage

# First argument must be version (without --)
if [[ "$1" == --* ]]; then
  echoerr "First argument must be version number"
  usage
fi

TAG_VERSION="$1"
shift

validate_version "$TAG_VERSION"

IS_QA=false
IS_HOTFIX=false

while [[ $# -gt 0 ]]; do
  case "$1" in
  --qa)
    IS_QA=true
    shift
    ;;
  --hotfix)
    IS_HOTFIX=true
    shift
    ;;
  *)
    echo "Unknown option: '$1'" >&2
    usage
    ;;
  esac
done

assert_git_repo
$IS_HOTFIX || assert_default_branch
assert_no_unpulled_changes

# Get the repository directory name
REPO_NAME=$(basename "$(git rev-parse --show-toplevel)")
PRERELEASE_NAME=$(convert_to_screaming_snake "$REPO_NAME")

if $IS_QA; then
  TAG_PREFIX="$TAG_VERSION-QA_${PRERELEASE_NAME}."
  NEXT_INDEX=$(get_next_index "$TAG_PREFIX")
  NEW_TAG="$TAG_PREFIX$NEXT_INDEX"
  read -rp "Enter release ticket number: " TICKET_NUMBER
else
  NEW_TAG="$TAG_VERSION"
  read -rp "Enter release ticket number: " TICKET_NUMBER
fi

if [[ -z "$TICKET_NUMBER" ]]; then
  echoerr "Ticket number cannot be empty"
  exit 1
fi

COMMENT="$JIRA_URL/$TICKET_NUMBER"

assert_tag_does_not_exist "$NEW_TAG"
echo "Creating tag: $NEW_TAG"

while true; do
  echo "Script will run the following command:"
  echo "git tag -a $NEW_TAG -m \"$COMMENT\""
  read -rp "Proceed? y/n" yn
  case $yn in
  [Yy]*)
    git tag -a "$NEW_TAG" -m "$COMMENT"
    break
    ;;
  [Nn]*) exit ;;
  *) echo "Please answer yes or no." ;;
  esac
done
